% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_files.R
\name{read_delim_multi}
\alias{read_delim_multi}
\alias{read_csv_multi}
\alias{read_tsv_multi}
\title{Read and bind multiple data files at once.}
\usage{
read_delim_multi(files, ...)

read_csv_multi(files, ...)

read_tsv_multi(files, ...)
}
\arguments{
\item{files}{A character vector containing a series of paths to files.}

\item{...}{other arguments passed on to \code{\link[readr]{read_delim}}.}
}
\value{
A data frame, with file contents concatenated row-wise.
Contains a column \code{file} with the file name of origin for each line of data.
}
\description{
Wrapper around \code{\link[readr]{read_delim}} to read multiple files at once
and return a single \code{\link[tibble]{tibble}} where all files have been combined row-wise.
For example, in a psychological experiment where one task is run repeatedly
for multiple subjects, use this function to read all of their data into one
fully long dataframe at once. As with \code{\link[readr]{read_csv}} and \code{\link[readr]{read_tsv}},
the \code{read_*_multi} versions are special cases of \code{read_delim_multi} for common
types of flat file data, CSV and TSV.
}
\details{
\code{read_delim_multi} requires all files to have the same file ending, and thus
the same delimiter.

All functions first attempt to use \code{\link[dplyr]{bind_rows}} to combine data, in order
to preserve column data types as rigorously as possible. If this fails, \code{\link[plyr]{rbind.fill}}
will instead be used to combine data, which may silently coerce some columns to character.
}
\examples{
\dontrun{
read_csv_multi(files = c("subject1.csv", "subject2.csv", "subject3.csv"))
}
}
